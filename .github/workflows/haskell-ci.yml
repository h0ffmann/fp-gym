name: Haskell CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ============================================
  # HASKELL BUILD & TEST MATRIX
  # ============================================
  haskell-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ghc-version: ['9.8.4']
        include:
          - ghc-version: '9.8.4'
            stack-yaml: 'stack.yaml'
    
    name: Haskell (GHC ${{ matrix.ghc-version }})
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Haskell Stack
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc-version }}
        enable-stack: true
        stack-version: 'latest'

    - name: Cache Stack dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack
          haskell/.stack-work
        key: ubuntu-latest-stack-${{ hashFiles('**/stack.yaml', '**/stack.yaml.lock', '**/*.cabal') }}-${{ matrix.ghc-version }}
        restore-keys: |
          ubuntu-latest-stack-${{ hashFiles('**/stack.yaml', '**/stack.yaml.lock', '**/*.cabal') }}-
          ubuntu-latest-stack-
          ${{ runner.os }}-stack-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev libffi8ubuntu1 libgmp-dev libgmp10 libncurses-dev

    - name: Setup GHC and Stack
      working-directory: haskell
      run: |
        stack setup --resolver ghc-${{ matrix.ghc-version }}
        stack --version
        stack ghc -- --version

    - name: Install dependencies
      working-directory: haskell
      run: |
        stack build --resolver ghc-${{ matrix.ghc-version }} --dependencies-only
      
    - name: Build Haskell project
      working-directory: haskell
      run: |
        stack build --resolver ghc-${{ matrix.ghc-version }}
      
    - name: Run Haskell tests
      working-directory: haskell
      run: |
        stack test --resolver ghc-${{ matrix.ghc-version }}
      
    - name: Run unit tests specifically
      working-directory: haskell
      run: |
        echo "üß™ Running unit tests..."
        stack test --resolver ghc-${{ matrix.ghc-version }} --test-arguments="--match='TwoSumSpec'"
      
    - name: Run property tests specifically
      working-directory: haskell
      run: |
        echo "üß™ Running property tests..."
        stack test --resolver ghc-${{ matrix.ghc-version }} --test-arguments="--match='Properties'" || echo "‚ö†Ô∏è Property tests not yet implemented"
      
    - name: Generate test coverage
      working-directory: haskell
      run: |
        echo "üìä Generating test coverage..."
        stack test --resolver ghc-${{ matrix.ghc-version }} --coverage || echo "‚ö†Ô∏è Coverage generation failed"
      
    - name: Run hlint (if available)
      working-directory: haskell
      run: |
        if stack exec --resolver ghc-${{ matrix.ghc-version }} -- which hlint >/dev/null 2>&1; then
          echo "üîç Running hlint..."
          stack exec --resolver ghc-${{ matrix.ghc-version }} -- hlint src test app bench || echo "‚ö†Ô∏è Hlint suggestions found"
        else
          echo "‚ö†Ô∏è Hlint not available, skipping lint check"
        fi
      
    - name: Generate Haddock documentation
      working-directory: haskell
      run: |
        echo "üìö Generating documentation..."
        stack haddock --resolver ghc-${{ matrix.ghc-version }} || echo "‚ö†Ô∏è Documentation generation failed"
      if: matrix.ghc-version == '9.8.4'  # Only generate docs for the GHC version we're using
      
    - name: Test executable
      working-directory: haskell
      run: |
        echo "üéØ Testing executable..."
        stack exec --resolver ghc-${{ matrix.ghc-version }} fp-gym-haskell-exe || echo "‚ö†Ô∏è Executable test failed"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: haskell-test-results-ghc-${{ matrix.ghc-version }}
        path: |
          haskell/.stack-work/logs/
          haskell/.stack-work/dist/*/doc/
          haskell/.stack-work/install/*/doc/
        retention-days: 30
          
    - name: Haskell Test Summary
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Haskell tests passed on GHC ${{ matrix.ghc-version }}!"
        else
          echo "‚ùå Haskell tests failed on GHC ${{ matrix.ghc-version }}. Check the logs above."
        fi

  haskell-status:
    needs: [haskell-test]
    if: always()
    runs-on: ubuntu-latest
    
    name: Haskell CI Status
    
    steps:
    - name: Check Haskell CI status
      run: |
        echo "üìä Haskell CI Results:"
        echo "====================="
        
        if [ "${{ needs.haskell-test.result }}" == "success" ]; then
          echo "‚úÖ Haskell tests: PASSED"
        else
          echo "‚ùå Haskell tests: FAILED"
          OVERALL_FAILED=true
        fi
        
        echo "====================="
        
        if [ "$OVERALL_FAILED" == "true" ]; then
          echo "‚ùå Haskell CI FAILED"
          exit 1
        else
          echo "‚úÖ Haskell CI PASSED"
          echo "üéâ All Haskell checks completed successfully!"
        fi